// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PluginStore.Api.Data;

#nullable disable

namespace PluginStore.Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221217155750_AddPluginAndPluginVersionEntities")]
    partial class AddPluginAndPluginVersionEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("PluginStore.Api.Models.Plugin", b =>
                {
                    b.Property<int>("PluginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeveloperKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PetrelVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PluginId");

                    b.ToTable("Plugins");
                });

            modelBuilder.Entity("PluginStore.Api.Models.PluginVersion", b =>
                {
                    b.Property<int>("PluginVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Beta")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Deprecated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GitLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PluginId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PluginVersionId");

                    b.HasIndex("PluginId");

                    b.ToTable("PluginVersions");
                });

            modelBuilder.Entity("PluginStore.Api.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PluginStore.Api.Models.PluginVersion", b =>
                {
                    b.HasOne("PluginStore.Api.Models.Plugin", null)
                        .WithMany("PluginVersions")
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PluginStore.Api.Models.Plugin", b =>
                {
                    b.Navigation("PluginVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
